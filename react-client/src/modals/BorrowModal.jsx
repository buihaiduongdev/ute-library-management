// src/modals/BorrowModal.jsx
import React, { useState, useEffect } from "react";
import {
  Modal,
  Stack,
  NumberInput,
  Alert,
  Text,
  Group,
  Button,
  Badge,
} from "@mantine/core";
import { DateInput } from "@mantine/dates"; // Mantine Dates
import { IconUser, IconCalendar } from "@tabler/icons-react";
import { notifications } from "@mantine/notifications";

function BorrowModal({ opened, onClose, selectedBooks, refresh }) {
  const [readerInfo, setReaderInfo] = useState({ IdDG: "" });
  const [dueDate, setDueDate] = useState(null); // Date | null
  const [maxBorrowDays, setMaxBorrowDays] = useState(14); // M·∫∑c ƒë·ªãnh 14 ng√†y
  const [loading, setLoading] = useState(false);

  // Load c·∫•u h√¨nh v√† set ng√†y m·∫∑c ƒë·ªãnh khi m·ªü modal
  useEffect(() => {
    if (opened) {
      loadConfig();
    }
  }, [opened]);

  const loadConfig = async () => {
    try {
      const token = localStorage.getItem("token");
      const res = await fetch("/api/borrow/config", {
        headers: { Authorization: `Bearer ${token}` },
      });
      const data = await res.json();
      
      if (res.ok) {
        const days = data.data.soNgayMuonMacDinh;
        setMaxBorrowDays(days);
        
        // T·ª± ƒë·ªông set ng√†y h·∫πn tr·∫£ = h√¥m nay + s·ªë ng√†y m·∫∑c ƒë·ªãnh
        const defaultDueDate = new Date();
        defaultDueDate.setDate(defaultDueDate.getDate() + days);
        setDueDate(defaultDueDate);
      }
    } catch (error) {
      console.error("Error loading config:", error);
      // N·∫øu l·ªói th√¨ v·∫´n set ng√†y m·∫∑c ƒë·ªãnh 14 ng√†y
      const defaultDueDate = new Date();
      defaultDueDate.setDate(defaultDueDate.getDate() + 14);
      setDueDate(defaultDueDate);
    }
  };

  const handleBorrowSubmit = async () => {
    if (!readerInfo.IdDG || !dueDate) {
      notifications.show({
        title: "L·ªói",
        message: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin",
        color: "red",
      });
      return;
    }

    // Validate ng√†y h·∫πn tr·∫£
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const selectedDate = new Date(dueDate);
    selectedDate.setHours(0, 0, 0, 0);
    
    const diffDays = Math.ceil((selectedDate - today) / (1000 * 60 * 60 * 24));
    
    if (diffDays > maxBorrowDays) {
      notifications.show({
        title: "L·ªói",
        message: `Ng√†y h·∫πn tr·∫£ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° ${maxBorrowDays} ng√†y k·ªÉ t·ª´ h√¥m nay`,
        color: "red",
      });
      return;
    }

    if (diffDays < 1) {
      notifications.show({
        title: "L·ªói",
        message: "Ng√†y h·∫πn tr·∫£ ph·∫£i l√† ng√†y trong t∆∞∆°ng lai",
        color: "red",
      });
      return;
    }

    setLoading(true);
    try {
      const token = localStorage.getItem("token");

      // ƒê·∫£m b·∫£o dueDate l√† Date tr∆∞·ªõc khi g·ªçi toISOString
      const formattedDate =
        dueDate instanceof Date
          ? dueDate.toISOString().split("T")[0]
          : new Date(dueDate).toISOString().split("T")[0];

      const sachMuon = selectedBooks.map((MaCuonSach) => ({
        maCuonSach: MaCuonSach,
        ngayHenTra: formattedDate,
      }));

      const res = await fetch("/api/borrow", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          idDG: parseInt(readerInfo.IdDG),
          sachMuon,
        }),
      });

      const data = await res.json();

      if (res.ok) {
        notifications.show({
          title: "Th√†nh c√¥ng",
          message: "T·∫°o phi·∫øu m∆∞·ª£n th√†nh c√¥ng",
          color: "green",
        });
        onClose();
        setReaderInfo({ IdDG: "" });
        setDueDate(null);
        refresh();
      } else {
        throw new Error(data.message);
      }
    } catch (error) {
      notifications.show({
        title: "L·ªói",
        message: error.message || "Kh√¥ng th·ªÉ t·∫°o phi·∫øu m∆∞·ª£n",
        color: "red",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <Modal
      opened={opened}
      onClose={onClose}
      title={
        <Group gap="sm">
          <IconCalendar size={24} color="#667eea" />
          <Text size="xl" fw={700} style={{ color: "#667eea" }}>
            T·∫°o Phi·∫øu M∆∞·ª£n S√°ch
          </Text>
        </Group>
      }
      size="lg"
      radius="md"
      overlayProps={{ blur: 3 }}
    >
      <Stack gap="lg">
        <NumberInput
          label="ID ƒê·ªôc Gi·∫£"
          description="Nh·∫≠p m√£ ID c·ªßa ƒë·ªôc gi·∫£ mu·ªën m∆∞·ª£n s√°ch"
          placeholder="VD: 1, 2, 3..."
          leftSection={<IconUser size={18} />}
          value={readerInfo.IdDG}
          onChange={(val) => setReaderInfo({ IdDG: val })}
          required
          size="md"
          radius="md"
        />

        <DateInput
          label="Ng√†y H·∫πn Tr·∫£"
          description={`M·∫∑c ƒë·ªãnh: ${maxBorrowDays} ng√†y. T·ªëi ƒëa: ${maxBorrowDays} ng√†y k·ªÉ t·ª´ h√¥m nay`}
          placeholder="Ch·ªçn ng√†y..."
          leftSection={<IconCalendar size={18} />}
          value={dueDate}
          onChange={(val) => {
            if (val) setDueDate(val instanceof Date ? val : new Date(val));
            else setDueDate(null);
          }}
          minDate={new Date()}
          maxDate={(() => {
            const maxDate = new Date();
            maxDate.setDate(maxDate.getDate() + maxBorrowDays);
            return maxDate;
          })()}
          required
          size="md"
          radius="md"
        />

        <Alert 
          title="S√°ch ƒê√£ Ch·ªçn" 
          color="blue" 
          variant="light"
          radius="md"
          style={{ padding: "1rem" }}
        >
          <Group justify="space-between">
            <Text size="md" fw={500}>üìö T·ªïng s·ªë s√°ch: </Text>
            <Badge size="xl" variant="filled" color="blue">{selectedBooks.length}</Badge>
          </Group>
        </Alert>

        <Group justify="space-between" mt="md">
          <Button 
            variant="subtle" 
            color="gray" 
            onClick={onClose}
            size="md"
          >
            H·ªßy B·ªè
          </Button>
          <Button 
            onClick={handleBorrowSubmit}
            size="md"
            color="blue"
            leftSection={<IconCalendar size={18} />}
            loading={loading}
            disabled={loading}
          >
            T·∫°o Phi·∫øu M∆∞·ª£n
          </Button>
        </Group>
      </Stack>
    </Modal>
  );
}

export default BorrowModal;
