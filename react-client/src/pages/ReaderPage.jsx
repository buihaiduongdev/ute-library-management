import { useEffect, useState } from 'react';
import { Table, Button, Title, Group, Modal, TextInput, Stack, Text } from '@mantine/core';
import { useForm } from '@mantine/form';
import { useDisclosure } from '@mantine/hooks';
import { IconSearch } from '@tabler/icons-react';
import { getAllReaders, createReader, updateReader, deleteReader } from '../utils/api';
import { notifications } from '@mantine/notifications';

function ReaderPage() {
    const [readers, setReaders] = useState([]);
    const [opened, { open, close }] = useDisclosure(false); // Hook ƒë·ªÉ qu·∫£n l√Ω Modal
    const [deleteConfirmed, { open: openDelete, close: closeDelete }] = useDisclosure(false);
    const [error, setError] = useState(null);
    const [editingReader, setEditingReader] = useState(null); // null = create, object = edit
    const [readerToDelete, setReaderToDelete] = useState(null);
    const [searchTerm, setSearchTerm] = useState(''); // State cho t·ª´ kh√≥a t√¨m ki·∫øm

    // Form qu·∫£n l√Ω d·ªØ li·ªáu ƒë·ªôc gi·∫£
    const form = useForm({
        initialValues: {
            MaTK: '', // Optional - s·∫Ω t·ª± ƒë·ªông t·∫°o n·∫øu ƒë·ªÉ tr·ªëng
            MaDG: '',
            HoTen: '',
            Email: '',
            DiaChi: '',
            SoDienThoai: '',
            NgaySinh: '',
            NgayDangKy: new Date().toISOString().split('T')[0], // M·∫∑c ƒë·ªãnh ng√†y h√¥m nay
            NgayHetHan: new Date(new Date().setFullYear(new Date().getFullYear() + 1)).toISOString().split('T')[0], // M·∫∑c ƒë·ªãnh 1 nƒÉm sau
            TrangThai: true,
        },
        validate: {
            MaTK: (value) => null, // Kh√¥ng b·∫Øt bu·ªôc
            MaDG: (value) => (value ? null : 'M√£ ƒë·ªôc gi·∫£ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'),
            HoTen: (value) => {
                if (!value) return 'H·ªç t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
                // Cho ph√©p ch·ªØ c√°i ti·∫øng Vi·ªát c√≥ d·∫•u, kho·∫£ng tr·∫Øng v√† m·ªôt s·ªë k√Ω t·ª± ƒë·∫∑c bi·ªát c∆° b·∫£n
                const vietnameseNameRegex = /^[a-zA-Z√Ä√Å√Ç√É√à√â√ä√å√ç√í√ì√î√ï√ô√öƒÇƒêƒ®≈®∆†√†√°√¢√£√®√©√™√¨√≠√≤√≥√¥√µ√π√∫ƒÉƒëƒ©≈©∆°∆ØƒÇ√Çƒê√ä√î∆†∆Ø∆∞ƒÉ√¢ƒë√™√¥∆°∆∞\s\-\.]+$/;
                return vietnameseNameRegex.test(value) ? null : 'H·ªç t√™n ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i, kho·∫£ng tr·∫Øng v√† d·∫•u g·∫°ch ngang';
            },
            Email: (value) => (/^\S+@\S+$/.test(value) ? null : 'Email kh√¥ng h·ª£p l·ªá'),
        },
    });

    // H√†m ƒë·ªÉ l·∫•y danh s√°ch ƒë·ªôc gi·∫£
    const fetchReaders = async () => {
        try {
            const data = await getAllReaders();
            setReaders(data);
        } catch (error) {
            notifications.show({
                title: 'L·ªói',
                message: 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë·ªôc gi·∫£!',
                color: 'red',
            });
        }
    };

    // G·ªçi API khi component mount
    useEffect(() => {
        fetchReaders();
    }, []);

    // H√†m filter ƒë·ªôc gi·∫£ d·ª±a tr√™n t·ª´ kh√≥a t√¨m ki·∫øm
    const filteredReaders = readers.filter(reader => {
        const searchLower = searchTerm.toLowerCase();
        return (
            reader.MaDG?.toLowerCase().includes(searchLower) ||
            reader.HoTen?.toLowerCase().includes(searchLower) ||
            reader.Email?.toLowerCase().includes(searchLower) ||
            reader.SoDienThoai?.includes(searchTerm)
        );
    });

    // H√†m ƒë·ªÉ reset modal v·ªÅ tr·∫°ng th√°i t·∫°o m·ªõi
    const resetToCreateMode = () => {
        setEditingReader(null);
        form.reset();
        setError(null);
    };

    // H√†m m·ªü modal ƒë·ªÉ t·∫°o m·ªõi
    const handleCreateNew = () => {
        resetToCreateMode();
        open();
    };

    // H√†m m·ªü modal ƒë·ªÉ edit
    const handleEdit = (reader) => {
        setEditingReader(reader);
        form.setValues({
            MaTK: reader.MaTK || '',
            MaDG: reader.MaDG || '',
            HoTen: reader.HoTen || '',
            Email: reader.Email || '',
            DiaChi: reader.DiaChi || '',
            SoDienThoai: reader.SoDienThoai || '',
            NgaySinh: reader.NgaySinh ? new Date(reader.NgaySinh).toISOString().split('T')[0] : '',
            NgayDangKy: reader.NgayDangKy ? new Date(reader.NgayDangKy).toISOString().split('T')[0] : '',
            NgayHetHan: reader.NgayHetHan ? new Date(reader.NgayHetHan).toISOString().split('T')[0] : '',
            TrangThai: reader.TrangThai === 'ConHan',
        });
        open();
    };

    // H√†m x·ª≠ l√Ω khi submit form (t·∫°o m·ªõi ho·∫∑c c·∫≠p nh·∫≠t)
    const handleSubmit = async (values) => {
        try {
            console.log('üìù Form values:', values);
            
            if (editingReader) {
                // C·∫≠p nh·∫≠t ƒë·ªôc gi·∫£ - kh√¥ng g·ª≠i MaTK v√¨ n√≥ l√† foreign key
                const { MaTK, ...updateData } = values;
                console.log('üîÑ Update data:', updateData);
                await updateReader(editingReader.IdDG, updateData);
                notifications.show({
                    title: 'Th√†nh c√¥ng',
                    message: 'ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin ƒë·ªôc gi·∫£!',
                    color: 'green',
                });
            } else {
                // T·∫°o ƒë·ªôc gi·∫£ m·ªõi
                console.log('‚ûï Create reader data:', values);
                console.log('üîç NgaySinh in form:', values.NgaySinh, 'type:', typeof values.NgaySinh);
                await createReader(values);
                notifications.show({
                    title: 'Th√†nh c√¥ng',
                    message: 'ƒê√£ t·∫°o ƒë·ªôc gi·∫£ m·ªõi th√†nh c√¥ng!',
                    color: 'green',
                });
            }
            close();
            resetToCreateMode();
            fetchReaders(); // T·∫£i l·∫°i danh s√°ch
        } catch (error) {
            console.error('‚ùå Submit error:', error);
            setError(error.message || 'X·ª≠ l√Ω ƒë·ªôc gi·∫£ th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
        }
    };

    // H√†m x√°c nh·∫≠n x√≥a
    const handleDelete = (reader) => {
        setReaderToDelete(reader);
        openDelete();
    };

    // H√†m th·ª±c hi·ªán x√≥a
    const confirmDelete = async () => {
        try {
            await deleteReader(readerToDelete.IdDG);
            notifications.show({
                title: 'Th√†nh c√¥ng',
                message: 'ƒê√£ x√≥a ƒë·ªôc gi·∫£ th√†nh c√¥ng!',
                color: 'green',
            });
            closeDelete();
            setReaderToDelete(null);
            fetchReaders(); // T·∫£i l·∫°i danh s√°ch
        } catch (error) {
            notifications.show({
                title: 'L·ªói',
                message: 'Kh√¥ng th·ªÉ x√≥a ƒë·ªôc gi·∫£. Vui l√≤ng th·ª≠ l·∫°i!',
                color: 'red',
            });
        }
    };

    // Hi·ªÉn th·ªã c√°c h√†ng c·ªßa b·∫£ng
    const rows = filteredReaders.map((reader) => (
        <Table.Tr key={reader.IdDG}>
            <Table.Td>{reader.MaDG}</Table.Td>
            <Table.Td>{reader.HoTen}</Table.Td>
            <Table.Td>{reader.Email}</Table.Td>
            <Table.Td>{new Date(reader.NgayDangKy).toLocaleDateString()}</Table.Td>
            <Table.Td>{reader.TrangThai === 'ConHan' ? 'Ho·∫°t ƒë·ªông' : 'B·ªã kh√≥a'}</Table.Td>
            <Table.Td>
                <Group gap="xs">
                    <Button size="xs" variant="outline" onClick={() => handleEdit(reader)}>
                        S·ª≠a
                    </Button>
                    <Button size="xs" color="red" variant="outline" onClick={() => handleDelete(reader)}>
                        X√≥a
                    </Button>
                </Group>
            </Table.Td>
        </Table.Tr>
    ));

    return (
        <>
            {/* Modal create/edit */}
            <Modal 
                opened={opened} 
                onClose={() => {
                    close();
                    resetToCreateMode();
                }} 
                title={editingReader ? "C·∫≠p nh·∫≠t ƒê·ªôc Gi·∫£" : "T·∫°o ƒê·ªôc Gi·∫£ M·ªõi"} 
                centered
                size="md"
            >
                <form onSubmit={form.onSubmit(handleSubmit)}>
                    <Stack>
                        {error && <Text c="red" size="sm">{error}</Text>}
                        <TextInput label="M√£ ƒê·ªôc Gi·∫£" placeholder="DG001" {...form.getInputProps('MaDG')} required />
                        <TextInput label="M√£ T√†i Kho·∫£n (T√πy ch·ªçn)" placeholder="ƒê·ªÉ tr·ªëng ƒë·ªÉ t·ª± ƒë·ªông t·∫°o t√†i kho·∫£n m·ªõi" {...form.getInputProps('MaTK')} />
                        <TextInput label="H·ªç T√™n" placeholder="Nguy·ªÖn VƒÉn A" {...form.getInputProps('HoTen')} required />
                        <TextInput label="Email" placeholder="example@mail.com" {...form.getInputProps('Email')} required />
                        <TextInput label="Ng√†y Sinh" type="date" {...form.getInputProps('NgaySinh')} />
                        <TextInput label="ƒê·ªãa ch·ªâ" placeholder="123 ƒê∆∞·ªùng ABC" {...form.getInputProps('DiaChi')} />
                        <TextInput label="S·ªë ƒêi·ªán Tho·∫°i" placeholder="09xxxxxxx" {...form.getInputProps('SoDienThoai')} />
                        <Group justify="flex-end" mt="md">
                            <Button variant="default" onClick={() => {
                                close();
                                resetToCreateMode();
                            }}>H·ªßy</Button>
                            <Button type="submit">{editingReader ? 'C·∫≠p nh·∫≠t' : 'T·∫°o m·ªõi'}</Button>
                        </Group>
                    </Stack>
                </form>
            </Modal>

            {/* Modal x√°c nh·∫≠n x√≥a */}
            <Modal opened={deleteConfirmed} onClose={closeDelete} title="X√°c nh·∫≠n x√≥a ƒë·ªôc gi·∫£" centered>
                <Stack>
                    <Text>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ƒë·ªôc gi·∫£ n√†y kh√¥ng?</Text>
                    {readerToDelete && (
                        <Text size="sm" c="dimmed">
                            <strong>{readerToDelete.HoTen}</strong> ({readerToDelete.MaDG})
                        </Text>
                    )}
                    <Text size="sm" c="red">‚ö†Ô∏è H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.</Text>
                    <Group justify="flex-end" mt="md">
                        <Button variant="default" onClick={closeDelete}>H·ªßy</Button>
                        <Button color="red" onClick={confirmDelete}>X√≥a</Button>
                    </Group>
                </Stack>
            </Modal>

            <Group justify="space-between" mb="md">
                <Title order={2}>Qu·∫£n l√Ω ƒê·ªôc gi·∫£</Title>
                <Button onClick={handleCreateNew}>Th√™m ƒê·ªôc gi·∫£</Button>
            </Group>

            {/* Thanh t√¨m ki·∫øm */}
            <TextInput
                placeholder="T√¨m ki·∫øm theo m√£ ƒë·ªôc gi·∫£, h·ªç t√™n, email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i..."
                leftSection={<IconSearch size={16} />}
                value={searchTerm}
                onChange={(event) => setSearchTerm(event.currentTarget.value)}
                mb="md"
                size="md"
            />

            {/* Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng k·∫øt qu·∫£ */}
            {searchTerm && (
                <Text size="sm" c="dimmed" mb="sm">
                    T√¨m th·∫•y {filteredReaders.length} ƒë·ªôc gi·∫£ ph√π h·ª£p v·ªõi "{searchTerm}"
                </Text>
            )}
            
            <Table striped highlightOnHover withTableBorder withColumnBorders>
                <Table.Thead>
                    <Table.Tr>
                        <Table.Th>M√£ ƒê·ªôc gi·∫£</Table.Th>
                        <Table.Th>H·ªç T√™n</Table.Th>
                        <Table.Th>Email</Table.Th>
                        <Table.Th>Ng√†y ƒëƒÉng k√Ω</Table.Th>
                        <Table.Th>Tr·∫°ng th√°i</Table.Th>
                        <Table.Th>H√†nh ƒë·ªông</Table.Th>
                    </Table.Tr>
                </Table.Thead>
                <Table.Tbody>
                    {rows.length > 0 ? rows : 
                        <Table.Tr>
                            <Table.Td colSpan={6} style={{ textAlign: 'center', padding: '20px' }}>
                                Kh√¥ng c√≥ d·ªØ li·ªáu
                            </Table.Td>
                        </Table.Tr>
                    }
                </Table.Tbody>
            </Table>
        </>
    );
}

export default ReaderPage;