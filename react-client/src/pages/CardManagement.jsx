import React, { useState, useEffect } from 'react';
import {
  Container,
  Title,
  Button,
  Group,
  Table,
  Badge,
  Modal,
  Stack,
  TextInput,
  Select,
  Text,
  Alert,
  Card,
  Grid,
  ActionIcon,
  Tooltip,
  Progress
} from '@mantine/core';
import { notifications } from '@mantine/notifications';
import { 
  IconEye, 
  IconRefresh, 
  IconBan, 
  IconCreditCard,
  IconCalendarTime,
  IconUser,
  IconPhone,
  IconMail,
  IconMapPin,
  IconAlertCircle,
  IconCheck,
  IconX
} from '@tabler/icons-react';
import { 
  getAllReaders, 
  getReaderCardInfo, 
  renewReaderCard, 
  deactivateReaderCard,
  createReader 
} from '../utils/api';

function CardManagement() {
  const [readers, setReaders] = useState([]);
  const [loading, setLoading] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('All');
  
  // Modal states
  const [cardInfoModalOpened, setCardInfoModalOpened] = useState(false);
  const [renewModalOpened, setRenewModalOpened] = useState(false); 
  const [deactivateModalOpened, setDeactivateModalOpened] = useState(false);
  
  // State for selected reader
  const [selectedReader, setSelectedReader] = useState(null);
  const [cardInfo, setCardInfo] = useState(null);
  const [renewData, setRenewData] = useState({ months: '', years: '' });

  // Form for renewal
  const renewForm = (function() {
    const formFields = {
      years: '',
      months: '',
      validate: {
        years: (value) => (value && parseInt(value) < 0 ? 'S·ªë nƒÉm ph·∫£i >= 0' : null),
        months: (value) => (value && parseInt(value) < 0 ? 'S·ªë th√°ng ph·∫£i >= 0' : null),
      },
    };
    
    return {
      ...formFields,
      reset: () => {
        renewData.years = '';
        renewData.months = '';
      },
      onSubmit: (callback) => {
        const data = { years: renewData.years ? parseInt(renewData.years) : undefined };
        if (renewData.months) data.months = parseInt(renewData.months);
        callback(data);
      }
    };
  })();

  // Fetch readers data
  const fetchData = async () => {
    setLoading(true);
    try {
      const data = await getAllReaders();
      setReaders(data);
    } catch (error) {
      notifications.show({
        title: 'L·ªói',
        message: 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë·ªôc gi·∫£!',
        color: 'red',
      });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  // Show card info modal
  const handleViewCard = async (reader) => {
    console.log('üé¥ handleViewCard called with reader:', reader);
    console.log('üîç reader.IdDG:', reader.IdDG, 'type:', typeof reader.IdDG);
    
    setSelectedReader(reader);
    try {
      const cardData = await getReaderCardInfo(reader.IdDG);
      setCardInfo(cardData);
      setCardInfoModalOpened(true);
    } catch (error) {
      console.error('‚ùå Error in handleViewCard:', error);
      notifications.show({
        title: 'L·ªói',
        message: 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin th·∫ª!',
        color: 'red',
      });
    }
  };

  // Renew card
  const handleRenew = async () => {
    if (!selectedReader) return;
    
    try {
      await renewReaderCard(selectedReader.IdDG, renewData);
      notifications.show({
        title: 'Th√†nh c√¥ng',
        message: 'Gia h·∫°n th·∫ª th√†nh c√¥ng!',
        color: 'green',
      });
      setRenewModalOpened(false);
      renewForm.reset();
      fetchData(); // Refresh data
    } catch (error) {
      notifications.show({
        title: 'L·ªói',
        message: error.message || 'Kh√¥ng th·ªÉ gia h·∫°n th·∫ª!',
        color: 'red',
      });
    }
  };

  // Deactivate card
  const handleDeactivate = async () => {
    if (!selectedReader) return;
    
    try {
      await deactivateReaderCard(selectedReader.IdDG);
      notifications.show({
        title: 'Th√†nh c√¥ng',
        message: 'V√¥ hi·ªáu h√≥a th·∫ª th√†nh c√¥ng!',
        color: 'green',
      });
      setDeactivateModalOpened(false);
      fetchData(); // Refresh data
    } catch (error) {
      notifications.show({
        title: 'L·ªói',
        message: error.message || 'Kh√¥ng th·ªÉ v√¥ hi·ªáu h√≥a th·∫ª!',
        color: 'red',
      });
    }
  };

  // Helper function to check if reader has active borrows
  const hasActiveBorrows = (reader) => {
    // This would need to be fetched from the API or stored in state
    // For now, we'll assume we don't have this info and let the backend handle it
    return false; // Placeholder - backend will validate
  };

  // Get card status badge
  const getCardStatusBadge = (reader) => {
    const today = new Date();
    const expiresAt = new Date(reader.NgayHetHan);
    const isExpired = today > expiresAt;
    const daysUntilExpiry = Math.ceil((expiresAt - today) / (1000 * 60 * 60 * 24));
    
    if (reader.TrangThai === 'TamKhoa') {
      return <Badge color="red" leftSection={<IconBan size={14} />}>T·∫°m Kh√≥a</Badge>;
    } else if (isExpired) {
      return <Badge color="orange" leftSection={<IconX size={14} />}>H·∫øt H·∫°n</Badge>;
    } else if (daysUntilExpiry <= 30) {
      return <Badge color="yellow">S·∫Øp H·∫øt H·∫°n</Badge>;
    } else {
      return <Badge color="green" leftSection={<IconCheck size={14} />}>C√≤n H·∫°n</Badge>;
    }
  };

  // Filter readers
  const filteredReaders = readers.filter(reader => {
    const matchesSearch = 
      (reader.MaDG?.toLowerCase().includes(searchTerm.toLowerCase())) ||
      (reader.HoTen?.toLowerCase().includes(searchTerm.toLowerCase())) ||
      (reader.Email?.toLowerCase().includes(searchTerm.toLowerCase()));
    
    const matchesStatus = statusFilter === 'All' || reader.TrangThai === statusFilter;
    
    return matchesSearch && matchesStatus;
  });

  const rows = filteredReaders.map((reader) => (
    <Table.Tr key={reader.IdDG}>
      <Table.Td>{reader.MaDG}</Table.Td>
      <Table.Td>{reader.HoTen}</Table.Td>
      <Table.Td>{reader.Email}</Table.Td>
      <Table.Td>{new Date(reader.NgayHetHan).toLocaleDateString()}</Table.Td>
      <Table.Td>{getCardStatusBadge(reader)}</Table.Td>
      <Table.Td>
        <Group gap="xs">
          <Tooltip label="Xem th√¥ng tin th·∫ª">
            <ActionIcon variant="outline" onClick={() => handleViewCard(reader)}>
              <IconEye size={16} />
            </ActionIcon>
          </Tooltip>
          
          {reader.TrangThai !== 'TamKhoa' && (
            <>
              <Tooltip label="Gia h·∫°n th·∫ª (ki·ªÉm tra s√°ch ƒëang m∆∞·ª£n)">
                <ActionIcon 
                  variant="outline" 
                  color="blue"
                  onClick={() => {
                    setSelectedReader(reader);
                    setRenewModalOpened(true);
                  }}
                >
                  <IconRefresh size={16} />
                </ActionIcon>
              </Tooltip>
              
              <Tooltip label="V√¥ hi·ªáu h√≥a th·∫ª">
                <ActionIcon 
                  variant="outline" 
                  color="red"
                  onClick={() => {
                    setSelectedReader(reader);
                    setDeactivateModalOpened(true);
                  }}
                >
                  <IconBan size={16} />
                </ActionIcon>
              </Tooltip>
            </>
          )}
        </Group>
      </Table.Td>
    </Table.Tr>
  ));

  return (
    <Container size="xl" py="md">
      <Group justify="space-between" mb="xl">
        <Title order={2}>
          <Group gap="xs">
            <IconCreditCard size={32} />
            Qu·∫£n L√Ω Th·∫ª ƒê·ªôc Gi·∫£
          </Group>
        </Title>
        <Button onClick={fetchData} loading={loading}>
          L√†m M·ªõi
        </Button>
      </Group>

      {/* Filters */}
      <Card withBorder p="md" mb="lg">
        <Grid>
          <Grid.Col span={6}>
            <TextInput
              placeholder="T√¨m ki·∫øm theo m√£ th·∫ª, h·ªç t√™n, email..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              style={{ width: '100%' }}
            />
          </Grid.Col>
          <Grid.Col span={3}>
            <Select
              placeholder="L·ªçc theo tr·∫°ng th√°i"
              value={statusFilter}
              onChange={setStatusFilter}
              data={[
                { value: 'All', label: 'T·∫•t c·∫£' },
                { value: 'ConHan', label: 'C√≤n H·∫°n' },
                { value: 'HetHan', label: 'H·∫øt H·∫°n' },
                { value: 'TamKhoa', label: 'T·∫°m Kh√≥a' },
              ]}
            />
          </Grid.Col>
          <Grid.Col span={3}>
            <Text size="sm" c="dimmed">
              Hi·ªÉn th·ªã {filteredReaders.length}/{readers.length} th·∫ª
            </Text>
          </Grid.Col>
        </Grid>
      </Card>

      {/* Card Table */}
      <Table striped highlightOnHover withTableBorder withColumnBorders>
        <Table.Thead>
          <Table.Tr>
            <Table.Th>M√£ Th·∫ª</Table.Th>
            <Table.Th>H·ªç T√™n</Table.Th>
            <Table.Th>Email</Table.Th>
            <Table.Th>Ng√†y H·∫øt H·∫°n</Table.Th>
            <Table.Th>Tr·∫°ng Th√°i</Table.Th>
            <Table.Th>H√†nh ƒê·ªông</Table.Th>
          </Table.Tr>
        </Table.Thead>
        <Table.Tbody>
          {rows.length > 0 ? rows : (
            <Table.Tr>
              <Table.Td colSpan={6} align="center">
                <Text c="dimmed">Kh√¥ng c√≥ d·ªØ li·ªáu</Text>
              </Table.Td>
            </Table.Tr>
          )}
        </Table.Tbody>
      </Table>

      {/* Card Info Modal */}
      <Modal
        opened={cardInfoModalOpened}
        onClose={() => setCardInfoModalOpened(false)}
        title="Th√¥ng Tin Th·∫ª ƒê·ªôc Gi·∫£"
        size="lg"
        centered
      >
        {cardInfo && (
          <Stack>
            {/* Card Status Alert */}
            <Alert
              color={cardInfo.cardStatus.isActive && !cardInfo.cardStatus.isExpired ? 'green' : 'red'}
              title={cardInfo.cardStatus.message}
              icon={<IconAlertCircle />}
            />

            {/* Reader Info */}
            <Card withBorder p="md">
              <Group mb="md">
                <IconUser size={24} />
                <Title order={4}>Th√¥ng Tin ƒê·ªôc Gi·∫£</Title>
              </Group>
              <Stack spacing="xs">
                <Text><strong>M√£ Th·∫ª:</strong> {cardInfo.reader.MaDG}</Text>
                <Text><strong>H·ªç T√™n:</strong> {cardInfo.reader.HoTen}</Text>
                <Text><strong>Email:</strong> {cardInfo.reader.Email}</Text>
                <Text><strong>S·ªë ƒêi·ªán Tho·∫°i:</strong> {cardInfo.reader.SoDienThoai}</Text>
                <Text><strong>ƒê·ªãa Ch·ªâ:</strong> {cardInfo.reader.DiaChi}</Text>
                <Text><strong>Ng√†y ƒêƒÉng K√Ω:</strong> {new Date(cardInfo.reader.NgayDangKy).toLocaleDateString()}</Text>
                <Text><strong>Ng√†y H·∫øt H·∫°n:</strong> {new Date(cardInfo.reader.NgayHetHan).toLocaleDateString()}</Text>
              </Stack>
            </Card>

            {/* Borrowing Info */}
            <Card withBorder p="md">
              <Group mb="md">
                <IconCalendarTime size={24} />
                <Title order={4}>Th√¥ng Tin M∆∞·ª£n S√°ch</Title>
              </Group>
              <Text color="dimmed">ƒêang m∆∞·ª£n {cardInfo.borrowCount} cu·ªën s√°ch</Text>
              
              {cardInfo.recentBorrows.length > 0 && (
                <Stack spacing="sm" mt="md">
                  <Text size="sm" weight={500}>C√°c phi·∫øu m∆∞·ª£n g·∫ßn ƒë√¢y:</Text>
                  {cardInfo.recentBorrows.map((borrow, index) => (
                    <Text key={index} size="sm" color="dimmed">
                      ‚Ä¢ Phi·∫øu #{borrow.MaPM} - {new Date(borrow.NgayMuon).toLocaleDateString()}
                    </Text>
                  ))}
                </Stack>
              )}
            </Card>
          </Stack>
        )}
      </Modal>

      {/* Renew Modal */}
      <Modal
        opened={renewModalOpened}
        onClose={() => setRenewModalOpened(false)}
        title="Gia H·∫°n Th·∫ª ƒê·ªôc Gi·∫£"
        centered
      >
        {selectedReader && (
          <Stack>
            <Alert color="blue" title="Th√¥ng Tin ƒê·ªôc Gi·∫£">
              <Text size="sm">
                <strong>{selectedReader.HoTen}</strong> ({selectedReader.MaDG})<br />
                Th·∫ª hi·ªán t·∫°i h·∫øt h·∫°n: {new Date(selectedReader.NgayHetHan).toLocaleDateString()}
              </Text>
            </Alert>

            <Alert color="yellow" title="L∆∞u √ù Quan Tr·ªçng">
              <Text size="sm">
                ‚ö†Ô∏è H·ªá th·ªëng s·∫Ω ki·ªÉm tra xem ƒë·ªôc gi·∫£ c√≥ ƒëang m∆∞·ª£n s√°ch kh√¥ng tr∆∞·ªõc khi gia h·∫°n.<br />
                N·∫øu ƒëang m∆∞·ª£n s√°ch, vui l√≤ng tr·∫£ s√°ch tr∆∞·ªõc khi gia h·∫°n th·∫ª.
              </Text>
            </Alert>

            <TextInput
              label="Gia h·∫°n theo nƒÉm"
              placeholder="Nh·∫≠p s·ªë nƒÉm mu·ªën gia h·∫°n"
              type="number"
              value={renewData.years}
              onChange={(e) => setRenewData({ ...renewData, years: e.target.value })}
            />

            <TextInput
              label="Gia h·∫°n theo th√°ng"
              placeholder="Nh·∫≠p s·ªë th√°ng mu·ªën gia h·∫°n"
              type="number"
              value={renewData.months}
              onChange={(e) => setRenewData({ ...renewData, months: e.target.value })}
            />

            <Text size="xs" color="dimmed">
              ƒê·ªÉ tr·ªëng c·∫£ hai ƒë·ªÉ gia h·∫°n m·∫∑c ƒë·ªãnh 1 nƒÉm
            </Text>

            <Group justify="flex-end">
              <Button variant="default" onClick={() => setRenewModalOpened(false)}>
                H·ªßy
              </Button>
              <Button onClick={handleRenew}>
                Gia H·∫°n
              </Button>
            </Group>
          </Stack>
        )}
      </Modal>

      {/* Deactivate Modal */}
      <Modal
        opened={deactivateModalOpened}
        onClose={() => setDeactivateModalOpened(false)}
        title="V√¥ Hi·ªáu H√≥a Th·∫ª ƒê·ªôc Gi·∫£"
        centered
      >
        {selectedReader && (
          <Stack>
            <Alert color="red" title="C·∫£nh B√°o" icon={<IconAlertCircle />}>
              B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën v√¥ hi·ªáu h√≥a th·∫ª c·ªßa ƒë·ªôc gi·∫£{' '}
              <strong>{selectedReader.HoTen}</strong> ({selectedReader.MaDG})?
              <br />
              H√†nh ƒë·ªông n√†y s·∫Ω ngƒÉn ƒë·ªôc gi·∫£ m∆∞·ª£n s√°ch.
            </Alert>

            <Group justify="flex-end">
              <Button variant="default" onClick={() => setDeactivateModalOpened(false)}>
                H·ªßy
              </Button>
              <Button color="red" onClick={handleDeactivate}>
                V√¥ Hi·ªáu H√≥a
              </Button>
            </Group>
          </Stack>
        )}
      </Modal>
    </Container>
  );
}

export default CardManagement;
