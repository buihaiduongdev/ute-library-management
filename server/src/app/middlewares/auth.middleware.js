const jwt = require('jsonwebtoken');

// ƒê√¢y l√† m·ªôt function "c·∫•p cao h∆°n", n√≥ nh·∫≠n v√†o m·ªôt m·∫£ng c√°c vai tr√≤ ƒë∆∞·ª£c ph√©p
// v√† tr·∫£ v·ªÅ m·ªôt middleware function th·ª±c s·ª±.
const verifyToken = (allowedRoles) => {
    return (req, res, next) => {
        // L·∫•y token t·ª´ header, th∆∞·ªùng c√≥ d·∫°ng "Bearer [token]"
        const authHeader = req.headers['authorization'];
        console.log('üîç Authorization header:', authHeader);
        const token = authHeader && authHeader.split(' ')[1];
        console.log('üîç Extracted token:', token ? 'Present' : 'Missing');

        // 1. N·∫øu kh√¥ng c√≥ token, t·ª´ ch·ªëi ngay
        if (!token) {
            console.log('‚ùå No token found');
            return res.status(401).json({ message: 'Y√™u c·∫ßu x√°c th·ª±c kh√¥ng h·ª£p l·ªá (Kh√¥ng t√¨m th·∫•y token).' }); // 401 Unauthorized
        }

        try {
            // 2. Gi·∫£i m√£ token
            console.log('üîç JWT Secret:', process.env.JWT_SECRET);
            const decoded = jwt.verify(token, process.env.JWT_SECRET);
            console.log('‚úÖ Decoded token:', decoded);

            // G√°n th√¥ng tin ƒë√£ gi·∫£i m√£ v√†o request ƒë·ªÉ c√°c controller sau c√≥ th·ªÉ d√πng
            req.user = decoded;

            // 3. Ki·ªÉm tra vai tr√≤
            // N·∫øu m·∫£ng allowedRoles ƒë∆∞·ª£c cung c·∫•p v√† vai tr√≤ c·ªßa ng∆∞·ªùi d√πng kh√¥ng n·∫±m trong m·∫£ng ƒë√≥
            console.log('üîç User role:', decoded.role, 'Allowed roles:', allowedRoles);
            if (allowedRoles && !allowedRoles.includes(decoded.role)) {
                console.log('‚ùå Role not allowed');
                return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.' }); // 403 Forbidden
            }
            
            console.log('‚úÖ Token valid, proceeding...');
            // M·ªçi th·ª© h·ª£p l·ªá, cho ph√©p ƒëi ti·∫øp
            next();
        } catch (err) {
            // N·∫øu token sai, h·∫øt h·∫°n, v.v.
            console.log('‚ùå Token verification failed:', err.message);
            return res.status(401).json({ message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.' });
        }
    };
};

module.exports = { verifyToken };
