
const db = require('../models/db');
const fs = require('fs');
const bcrypt = require('bcrypt');

class ReaderController {
    // [GET] /api/readers
    async getAllReaders(req, res) {
        try {
            console.log('üìÑ GET /api/readers - Request received');
            console.log('üîç User:', req.user);
            
            const readers = await db.docGia.findMany({
                include: {
                    TaiKhoan: {
                        select: {
                            TenDangNhap: true,
                            TrangThai: true
                        }
                    }
                }
            });
            
            console.log('‚úÖ Found readers:', readers.length);
            res.status(200).json(readers);
        } catch (error) {
            console.error('‚ùå Error in getAllReaders:', error);
            fs.appendFileSync('error.log', `${new Date().toISOString()} - GET ALL READERS ERROR: ${error.stack}\n`);
            res.status(500).json({ message: 'L·ªói h·ªá th·ªëng.', error: error.message });
        }
    }

    // [GET] /api/readers/:id
    async getReaderById(req, res) {
        const { id } = req.params;
        try {
            const reader = await db.docGia.findUnique({
                where: { MaDG: parseInt(id) }
            });
            if (!reader) {
                return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë·ªôc gi·∫£.' });
            }
            res.status(200).json(reader);
        } catch (error) {
            console.error(error);
            fs.appendFileSync('error.log', `${new Date().toISOString()} - GET READER BY ID ERROR: ${error.stack}\n`);
            res.status(500).json({ message: 'L·ªói h·ªá th·ªëng.', error: error.message });
        }
    }

    // [POST] /api/readers
    async createReader(req, res) {
        const { MaTK, HoTen, NgaySinh, DiaChi, Email, SoDienThoai, NgayHetHan } = req.body;
        try {
            console.log('üìã POST /api/readers - Request received');
            console.log('üìù Reader data:', { MaTK, HoTen, NgaySinh, DiaChi, Email, SoDienThoai, NgayHetHan });
            console.log('üîç NgaySinh type:', typeof NgaySinh, 'value:', NgaySinh);

            // N·∫øu kh√¥ng c√≥ MaTK, t·∫°o t√†i kho·∫£n m·ªõi
            let finalMaTK = MaTK;
            if (!MaTK) {
                console.log('üîë Creating new account for reader...');
                const username = Email ? Email.split('@')[0] : `reader_${Date.now()}`;
                const hashedPassword = await bcrypt.hash('123456', 10); // Default password
                
                const newAccount = await db.taiKhoan.create({
                    data: {
                        TenDangNhap: username,
                        MatKhauMaHoa: hashedPassword,
                        VaiTro: 2, // Reader role
                        TrangThai: 1 // Active
                    }
                });
                finalMaTK = newAccount.MaTK;
                console.log('‚úÖ Created new account with MaTK:', finalMaTK);
            }

            // Generate MaDG t·ª± ƒë·ªông n·∫øu kh√¥ng c√≥
            let MaDG = req.body.MaDG;
            if (!MaDG) {
                const year = new Date().getFullYear();
                const readerCount = await db.docGia.count({
                    where: { MaDG: { contains: `DG-${year}-` } }
                });
                const readerNumber = String(readerCount + 1).padStart(4, '0');
                MaDG = `DG-${year}-${readerNumber}`;
            }

            // X·ª≠ l√Ω ng√†y sinh
            let processedNgaySinh = null;
            if (NgaySinh && NgaySinh.trim() !== '') {
                try {
                    const dateObj = new Date(NgaySinh);
                    if (!isNaN(dateObj.getTime())) {
                        processedNgaySinh = dateObj;
                    }
                } catch (e) {
                    console.log('‚ö†Ô∏è Invalid NgaySinh:', NgaySinh);
                    processedNgaySinh = null;
                }
            }

            // Thi·∫øt l·∫≠p ng√†y h·∫øt h·∫°n m·∫∑c ƒë·ªãnh (1 nƒÉm sau)
            let processedNgayHetHan = new Date();
            processedNgayHetHan.setFullYear(processedNgayHetHan.getFullYear() + 1);
            
            if (NgayHetHan && NgayHetHan.trim() !== '') {
                try {
                    const customNgayHetHan = new Date(NgayHetHan);
                    if (!isNaN(customNgayHetHan.getTime())) {
                        processedNgayHetHan = customNgayHetHan;
                    }
                } catch (e) {
                    console.log('‚ö†Ô∏è Invalid NgayHetHan:', NgayHetHan);
                    // Gi·ªØ nguy√™n default
                }
            }
            
            console.log('üìÖ Processed dates:', { 
                processedNgaySinh, 
                processedNgayHetHan,
                NgaySinhOriginal: NgaySinh,
                NgayHetHanOriginal: NgayHetHan
            });

            const newReader = await db.docGia.create({
                data: {
                    MaTK: parseInt(finalMaTK),
                    MaDG,
                    HoTen,
                    NgaySinh: processedNgaySinh,
                    DiaChi,
                    Email,
                    SoDienThoai,
                    NgayHetHan: processedNgayHetHan,
                    TrangThai: 'ConHan'
                },
                include: {
                    TaiKhoan: {
                        select: {
                            TenDangNhap: true,
                            TrangThai: true
                        }
                    }
                }
            });

            console.log('‚úÖ Reader created successfully:', MaDG);
            res.status(201).json({ message: 'T·∫°o ƒë·ªôc gi·∫£ th√†nh c√¥ng.', reader: newReader });
        } catch (error) {
            console.error('‚ùå Error in createReader:', error);
            fs.appendFileSync('error.log', `${new Date().toISOString()} - CREATE READER ERROR: ${error.stack}\n`);
            res.status(500).json({ 
                message: 'L·ªói h·ªá th·ªëng khi t·∫°o ƒë·ªôc gi·∫£.', 
                error: error.message 
            });
        }
    }

    // [PUT] /api/readers/:id
    async updateReader(req, res) {
        const { id } = req.params;
        const { MaTK, MaDG, HoTen, NgaySinh, DiaChi, Email, SoDienThoai, NgayHetHan } = req.body;
        try {
            console.log('üìù PUT /api/readers/' + id + ' - Request received');
            console.log('üîç Update data:', { MaTK, MaDG, HoTen, NgaySinh, DiaChi, Email, SoDienThoai, NgayHetHan });
            
            // Ch·ªâ update c√°c field kh√¥ng ph·∫£i foreign key
            const updateData = {
                MaDG,
                    HoTen,
                    Email,
                SoDienThoai,
                DiaChi
            };

            // Ch·ªâ th√™m NgaySinh v√† NgayHetHan n·∫øu c√≥ v√† h·ª£p l·ªá
            if (NgaySinh && NgaySinh !== '') {
                updateData.NgaySinh = new Date(NgaySinh);
            }
            if (NgayHetHan && NgayHetHan !== '') {
                updateData.NgayHetHan = new Date(NgayHetHan);
            }

            console.log('üîß Update data after processing:', updateData);

            const updatedReader = await db.docGia.update({
                where: { IdDG: parseInt(id) },
                data: updateData,
                include: {
                    TaiKhoan: {
                        select: {
                            TenDangNhap: true,
                            TrangThai: true
                        }
                    }
                }
            });
            
            console.log('‚úÖ Reader updated successfully');
            res.status(200).json({ message: 'C·∫≠p nh·∫≠t th√¥ng tin ƒë·ªôc gi·∫£ th√†nh c√¥ng.', reader: updatedReader });
        } catch (error) {
            console.error('‚ùå Error in updateReader:', error);
            console.error('‚ùå Full error object:', error);
            fs.appendFileSync('error.log', `${new Date().toISOString()} - UPDATE READER ERROR: ${error.stack}\n`);
            res.status(500).json({ 
                message: 'L·ªói h·ªá th·ªëng khi c·∫≠p nh·∫≠t ƒë·ªôc gi·∫£.', 
                error: error.message,
                details: error.code || 'UNKNOWN_ERROR'
            });
        }
    }

    // [PUT] /api/readers/:id/renew - Gia h·∫°n th·∫ª ƒë·ªôc gi·∫£
    async renewReader(req, res) {
        const { id } = req.params;
        const { months, years } = req.body;
        try {
            console.log('üîÑ PUT /api/readers/' + id + '/renew - Request received');
            console.log('üìÖ Renew data:', { months, years });

            const reader = await db.docGia.findUnique({
                where: { IdDG: parseInt(id) },
                include: {
                    PhieuMuon: {
                        include: {
                            ChiTietMuon: {
                                where: {
                                    TrangThai: { not: 'TraSach' }
                                }
                            }
                        }
                    }
                }
            });

            if (!reader) {
                return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë·ªôc gi·∫£.' });
            }

            // Ki·ªÉm tra ƒë·ªôc gi·∫£ c√≥ ƒëang m∆∞·ª£n s√°ch kh√¥ng
            let activeBorrows = 0;
            reader.PhieuMuon.forEach(phieu => {
                activeBorrows += phieu.ChiTietMuon.length;
            });

            if (activeBorrows > 0) {
                console.log('‚ùå Reader has active borrows:', activeBorrows);
                return res.status(400).json({ 
                    message: `Kh√¥ng th·ªÉ gia h·∫°n th·∫ª. ƒê·ªôc gi·∫£ ƒëang m∆∞·ª£n ${activeBorrows} cu·ªën s√°ch. Vui l√≤ng tr·∫£ s√°ch tr∆∞·ªõc khi gia h·∫°n.`,
                    activeBorrows: activeBorrows
                });
            }

            console.log('‚úÖ Reader has no active borrows, proceeding with renewal');

            let newExpiryDate = new Date(reader.NgayHetHan);
            
            if (years) {
                newExpiryDate.setFullYear(newExpiryDate.getFullYear() + parseInt(years));
            } else if (months) {
                newExpiryDate.setMonth(newExpiryDate.getMonth() + parseInt(months));
            } else {
                // Default: extend 1 year
                newExpiryDate.setFullYear(newExpiryDate.getFullYear() + 1);
            }

            const updatedReader = await db.docGia.update({
                where: { IdDG: parseInt(id) },
                data: { 
                    NgayHetHan: newExpiryDate,
                    TrangThai: 'ConHan'
                },
                include: {
                    TaiKhoan: {
                        select: {
                            TenDangNhap: true,
                            TrangThai: true
                        }
                    }
                }
            });

            console.log('‚úÖ Reader renewed successfully');
            res.status(200).json({ 
                message: `Gia h·∫°n th·∫ª th√†nh c√¥ng ƒë·∫øn ${newExpiryDate.toLocaleDateString()}.`, 
                reader: updatedReader 
            });
        } catch (error) {
            console.error('‚ùå Error in renewReader:', error);
            res.status(500).json({ 
                message: 'L·ªói h·ªá th·ªëng khi gia h·∫°n th·∫ª.', 
                error: error.message 
            });
        }
    }

    // [PUT] /api/readers/:id/deactivate - V√¥ hi·ªáu h√≥a th·∫ª ƒë·ªôc gi·∫£
    async deactivateReader(req, res) {
        const { id } = req.params;
        try {
            console.log('üö´ PUT /api/readers/' + id + '/deactivate - Request received');

            const updatedReader = await db.docGia.update({
                where: { IdDG: parseInt(id) },
                data: { TrangThai: 'TamKhoa' },
                include: {
                    TaiKhoan: {
                        select: {
                            TenDangNhap: true,
                            TrangThai: true
                        }
                    }
                }
            });

            console.log('‚úÖ Reader deactivated successfully');
            res.status(200).json({ 
                message: 'V√¥ hi·ªáu h√≥a th·∫ª ƒë·ªôc gi·∫£ th√†nh c√¥ng.', 
                reader: updatedReader 
            });
        } catch (error) {
            console.error('‚ùå Error in deactivateReader:', error);
            res.status(500).json({ 
                message: 'L·ªói h·ªá th·ªëng khi v√¥ hi·ªáu h√≥a th·∫ª.', 
                error: error.message 
            });
        }
    }

    // [GET] /api/readers/:id/card-info - Th√¥ng tin th·∫ª ƒë·ªôc gi·∫£
    async getReaderCardInfo(req, res) {
        const { id } = req.params;
        try {
            console.log('üé¥ GET /api/readers/' + id + '/card-info - Request received');

            const reader = await db.docGia.findUnique({
                where: { IdDG: parseInt(id) },
                include: {
                    TaiKhoan: {
                        select: {
                            TenDangNhap: true,
                            TrangThai: true
                        }
                    },
                    PhieuMuon: {
                        select: {
                            MaPM: true,
                            ChiTietMuon: {
                                select: {
                                    NgayMuon: true,
                                    NgayHenTra: true,
                                    NgayTra: true,
                                    TrangThai: true
                                },
                                take: 5,
                                orderBy: { NgayMuon: 'desc' }
                            }
                        },
                        take: 5,
                        orderBy: { MaPM: 'desc' }
                    }
                }
            });

            if (!reader) {
                return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë·ªôc gi·∫£.' });
            }

            // Ki·ªÉm tra tr·∫°ng th√°i th·∫ª
            const isExpired = new Date() > reader.NgayHetHan;
            const isActive = reader.TrangThai === 'ConHan';
            const cardStatus = {
                isActive,
                isExpired,
                message: isExpired ? 'Th·∫ª ƒë√£ h·∫øt h·∫°n' : 
                       !isActive ? 'Th·∫ª ƒë√£ b·ªã kh√≥a' : 'Th·∫ª h·ª£p l·ªá'
            };

            // T√≠nh s·ªë l∆∞·ª£ng s√°ch ƒëang m∆∞·ª£n
            let borrowCount = 0;
            let recentBorrows = [];
            
            reader.PhieuMuon.forEach(phieu => {
                phieu.ChiTietMuon.forEach(chiTiet => {
                    if (chiTiet.TrangThai !== 'TraSach') {
                        borrowCount++;
                    }
                    recentBorrows.push({
                        MaPM: phieu.MaPM,
                        NgayMuon: chiTiet.NgayMuon,
                        NgayHenTra: chiTiet.NgayHenTra,
                        NgayTra: chiTiet.NgayTra,
                        TrangThai: chiTiet.TrangThai
                    });
                });
            });

            // S·∫Øp x·∫øp theo ng√†y m∆∞·ª£n m·ªõi nh·∫•t
            recentBorrows.sort((a, b) => new Date(b.NgayMuon) - new Date(a.NgayMuon));
            recentBorrows = recentBorrows.slice(0, 5);

            const cardInfo = {
                reader,
                cardStatus,
                borrowCount,
                recentBorrows
            };

            console.log('‚úÖ Card info retrieved successfully');
            res.status(200).json(cardInfo);
        } catch (error) {
            console.error('‚ùå Error in getReaderCardInfo:', error);
            res.status(500).json({ 
                message: 'L·ªói h·ªá th·ªëng khi l·∫•y th√¥ng tin th·∫ª.', 
                error: error.message 
            });
        }
    }

    // [GET] /api/readers/:id/borrow-info - L·∫•y th√¥ng tin ƒë·∫ßy ƒë·ªß ƒë·ªÉ m∆∞·ª£n s√°ch
    async getReaderBorrowInfo(req, res) {
        const { id } = req.params;
        try {
            console.log('üìö GET /api/readers/' + id + '/borrow-info - Request received');

            // T√¨m ƒë·ªôc gi·∫£
            const reader = await db.docGia.findUnique({
                where: { IdDG: parseInt(id) },
                include: {
                    TaiKhoan: {
                        select: {
                            TenDangNhap: true,
                            TrangThai: true
                        }
                    }
                }
            });

            if (!reader) {
                return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë·ªôc gi·∫£.' });
            }

            // ƒê·∫øm s·ªë s√°ch ƒëang m∆∞·ª£n
            const soSachDangMuon = await db.chiTietMuon.count({
                where: {
                    PhieuMuon: {
                        IdDG: parseInt(id)
                    },
                    TrangThai: 'DangMuon'
                }
            });

            // T√≠nh t·ªïng ti·ªÅn ph·∫°t ch∆∞a thanh to√°n
            const unpaidFines = await db.thePhat.findMany({
                where: {
                    TraSach: {
                        PhieuMuon: {
                            IdDG: parseInt(id)
                        }
                    },
                    TrangThaiThanhToan: 'ChuaThanhToan'
                },
                select: {
                    SoTienPhat: true,
                    LyDoPhat: true
                }
            });

            const tongTienPhat = unpaidFines.reduce(
                (sum, fine) => sum + parseFloat(fine.SoTienPhat),
                0
            );

            // Ki·ªÉm tra tr·∫°ng th√°i c√≥ th·ªÉ m∆∞·ª£n s√°ch kh√¥ng
            const coTheMuonSach = reader.TrangThai === 'ConHan' && new Date() <= new Date(reader.NgayHetHan);

            // Tr·∫£ v·ªÅ th√¥ng tin ƒë·∫ßy ƒë·ªß
            const borrowInfo = {
                ...reader,
                soSachDangMuon,
                tongTienPhat,
                coNoPhat: tongTienPhat > 0,
                soLuongNoPhat: unpaidFines.length,
                coTheMuonSach,
                lyDoKhongMuon: !coTheMuonSach ? 
                    (reader.TrangThai !== 'ConHan' ? 'T√†i kho·∫£n kh√¥ng c√≤n h·∫°n' : 'Th·∫ª ƒë√£ h·∫øt h·∫°n') : null
            };

            console.log('‚úÖ Reader borrow info retrieved successfully');
            res.status(200).json(borrowInfo);
        } catch (error) {
            console.error('‚ùå Error in getReaderBorrowInfo:', error);
            res.status(500).json({ 
                message: 'L·ªói h·ªá th·ªëng khi l·∫•y th√¥ng tin ƒë·ªôc gi·∫£.', 
                error: error.message 
            });
        }
    }

    // [DELETE] /api/readers/:id - SIMPLIFIED VERSION
    async deleteReader(req, res) {
        const { id } = req.params;
        try {
            console.log('üóëÔ∏è DELETE /api/readers/' + id + ' - Request received');
            
            // Ki·ªÉm tra reader c√≥ t·ªìn t·∫°i kh√¥ng (SIMPLE CHECK)
            console.log('üîç Checking if reader exists...');
            const reader = await db.docGia.findUnique({
                where: { IdDG: parseInt(id) }
            });

            if (!reader) {
                console.log('‚ùå Reader not found');
                return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë·ªôc gi·∫£.' });
            }

            console.log('‚úÖ Reader found:', reader.HoTen);

            // TRY CASCADE DELETE - ƒê∆°n gi·∫£n nh·∫•t
            console.log('üóëÔ∏è Attempting cascade delete...');
            await db.docGia.delete({
                where: { IdDG: parseInt(id) }
            });
            
            console.log('‚úÖ Reader deleted successfully');
            res.status(200).json({ message: 'X√≥a ƒë·ªôc gi·∫£ th√†nh c√¥ng.' });
            
        } catch (error) {
            console.error('‚ùå Error in deleteReader:', error);
            
            // N·∫øu l√† foreign key constraint error
            if (error.code === 'P2003') {
                console.log('üîí Foreign key constraint - attempting manual cleanup');
                
                try {
                    // X√≥a PhieuMuon tr∆∞·ªõc (S·ª¨A FIELD NAME)
                    await db.phieuMuon.deleteMany({
                        where: { IdDG: parseInt(id) }
                    });
                    
                    // X√≥a DocGia sau
                    await db.docGia.delete({
                        where: { IdDG: parseInt(id) }
                    });
                    
                    console.log('‚úÖ Reader deleted with manual cleanup');
                    return res.status(200).json({ message: 'X√≥a ƒë·ªôc gi·∫£ th√†nh c√¥ng.' });
                    
                } catch (cleanupError) {
                    console.error('‚ùå Cleanup failed:', cleanupError);
                    return res.status(500).json({
                        message: 'Kh√¥ng th·ªÉ x√≥a ƒë·ªôc gi·∫£ v√¨ c√≥ li√™n k·∫øt v·ªõi phi·∫øu m∆∞·ª£n s√°ch.',
                        error: cleanupError.message
                    });
                }
            }
            
            res.status(500).json({ 
                message: 'L·ªói h·ªá th·ªëng khi x√≥a ƒë·ªôc gi·∫£.', 
                error: error.message,
                details: error.code || 'UNKNOWN_ERROR'
            });
        }
    }
}

module.exports = new ReaderController();
