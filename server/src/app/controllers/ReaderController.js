
const db = require('../models/db');
const fs = require('fs');

class ReaderController {
    // [GET] /api/readers
    async getAllReaders(req, res) {
        try {
            console.log('üìÑ GET /api/readers - Request received');
            console.log('üîç User:', req.user);
            
            const readers = await db.docGia.findMany({
                include: {
                    TaiKhoan: {
                        select: {
                            TenDangNhap: true,
                            TrangThai: true
                        }
                    }
                }
            });
            
            console.log('‚úÖ Found readers:', readers.length);
            res.status(200).json(readers);
        } catch (error) {
            console.error('‚ùå Error in getAllReaders:', error);
            fs.appendFileSync('error.log', `${new Date().toISOString()} - GET ALL READERS ERROR: ${error.stack}\n`);
            res.status(500).json({ message: 'L·ªói h·ªá th·ªëng.', error: error.message });
        }
    }

    // [GET] /api/readers/:id
    async getReaderById(req, res) {
        const { id } = req.params;
        try {
            const reader = await db.docGia.findUnique({
                where: { MaDG: parseInt(id) }
            });
            if (!reader) {
                return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë·ªôc gi·∫£.' });
            }
            res.status(200).json(reader);
        } catch (error) {
            console.error(error);
            fs.appendFileSync('error.log', `${new Date().toISOString()} - GET READER BY ID ERROR: ${error.stack}\n`);
            res.status(500).json({ message: 'L·ªói h·ªá th·ªëng.', error: error.message });
        }
    }

    // [POST] /api/readers
    async createReader(req, res) {
        const { HoTen, NgaySinh, DiaChi, Email, SoDienThoai } = req.body;
        try {
            const newReader = await db.docGia.create({
                data: {
                    HoTen,
                    NgaySinh: new Date(NgaySinh),
                    DiaChi,
                    Email,
                    SoDienThoai
                }
            });
            res.status(201).json({ message: 'T·∫°o ƒë·ªôc gi·∫£ th√†nh c√¥ng.', reader: newReader });
        } catch (error) {
            console.error(error);
            fs.appendFileSync('error.log', `${new Date().toISOString()} - CREATE READER ERROR: ${error.stack}\n`);
            res.status(500).json({ message: 'L·ªói h·ªá th·ªëng.', error: error.message });
        }
    }

    // [PUT] /api/readers/:id
    async updateReader(req, res) {
        const { id } = req.params;
        const { MaTK, MaDG, HoTen, NgaySinh, DiaChi, Email, SoDienThoai, NgayHetHan } = req.body;
        try {
            console.log('üìù PUT /api/readers/' + id + ' - Request received');
            console.log('üîç Update data:', { MaTK, MaDG, HoTen, NgaySinh, DiaChi, Email, SoDienThoai, NgayHetHan });
            
            // Ch·ªâ update c√°c field kh√¥ng ph·∫£i foreign key
            const updateData = {
                MaDG,
                HoTen,
                Email,
                SoDienThoai,
                DiaChi
            };

            // Ch·ªâ th√™m NgaySinh v√† NgayHetHan n·∫øu c√≥ v√† h·ª£p l·ªá
            if (NgaySinh && NgaySinh !== '') {
                updateData.NgaySinh = new Date(NgaySinh);
            }
            if (NgayHetHan && NgayHetHan !== '') {
                updateData.NgayHetHan = new Date(NgayHetHan);
            }

            console.log('üîß Update data after processing:', updateData);

            const updatedReader = await db.docGia.update({
                where: { IdDG: parseInt(id) },
                data: updateData,
                include: {
                    TaiKhoan: {
                        select: {
                            TenDangNhap: true,
                            TrangThai: true
                        }
                    }
                }
            });
            
            console.log('‚úÖ Reader updated successfully');
            res.status(200).json({ message: 'C·∫≠p nh·∫≠t th√¥ng tin ƒë·ªôc gi·∫£ th√†nh c√¥ng.', reader: updatedReader });
        } catch (error) {
            console.error('‚ùå Error in updateReader:', error);
            console.error('‚ùå Full error object:', error);
            fs.appendFileSync('error.log', `${new Date().toISOString()} - UPDATE READER ERROR: ${error.stack}\n`);
            res.status(500).json({ 
                message: 'L·ªói h·ªá th·ªëng khi c·∫≠p nh·∫≠t ƒë·ªôc gi·∫£.', 
                error: error.message,
                details: error.code || 'UNKNOWN_ERROR'
            });
        }
    }

    // [DELETE] /api/readers/:id - SIMPLIFIED VERSION
    async deleteReader(req, res) {
        const { id } = req.params;
        try {
            console.log('üóëÔ∏è DELETE /api/readers/' + id + ' - Request received');
            
            // Ki·ªÉm tra reader c√≥ t·ªìn t·∫°i kh√¥ng (SIMPLE CHECK)
            console.log('üîç Checking if reader exists...');
            const reader = await db.docGia.findUnique({
                where: { IdDG: parseInt(id) }
            });

            if (!reader) {
                console.log('‚ùå Reader not found');
                return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë·ªôc gi·∫£.' });
            }

            console.log('‚úÖ Reader found:', reader.HoTen);

            // TRY CASCADE DELETE - ƒê∆°n gi·∫£n nh·∫•t
            console.log('üóëÔ∏è Attempting cascade delete...');
            await db.docGia.delete({
                where: { IdDG: parseInt(id) }
            });
            
            console.log('‚úÖ Reader deleted successfully');
            res.status(200).json({ message: 'X√≥a ƒë·ªôc gi·∫£ th√†nh c√¥ng.' });
            
        } catch (error) {
            console.error('‚ùå Error in deleteReader:', error);
            
            // N·∫øu l√† foreign key constraint error
            if (error.code === 'P2003') {
                console.log('üîí Foreign key constraint - attempting manual cleanup');
                
                try {
                    // X√≥a PhieuMuon tr∆∞·ªõc
                    await db.phieuMuon.deleteMany({
                        where: { MaDG: parseInt(id) }
                    });
                    
                    // X√≥a DocGia sau
                    await db.docGia.delete({
                        where: { IdDG: parseInt(id) }
                    });
                    
                    console.log('‚úÖ Reader deleted with manual cleanup');
                    return res.status(200).json({ message: 'X√≥a ƒë·ªôc gi·∫£ th√†nh c√¥ng.' });
                    
                } catch (cleanupError) {
                    console.error('‚ùå Cleanup failed:', cleanupError);
                    return res.status(500).json({
                        message: 'Kh√¥ng th·ªÉ x√≥a ƒë·ªôc gi·∫£ v√¨ c√≥ li√™n k·∫øt v·ªõi phi·∫øu m∆∞·ª£n s√°ch.',
                        error: cleanupError.message
                    });
                }
            }
            
            res.status(500).json({ 
                message: 'L·ªói h·ªá th·ªëng khi x√≥a ƒë·ªôc gi·∫£.', 
                error: error.message,
                details: error.code || 'UNKNOWN_ERROR'
            });
        }
    }
}

module.exports = new ReaderController();
