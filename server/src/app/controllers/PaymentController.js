const prisma = require('../models/db.js');
const sePayService = require('../../services/SePayService');

class PaymentController {
    /**
     * [POST] /api/payments/create-qr
     * T·∫°o QR code thanh to√°n cho ph·∫°t
     */
    async createPaymentQR(req, res) {
        try {
            const { maPhat } = req.body;
            const userId = req.user.id; // T·ª´ JWT middleware
            const userRole = req.user.role; // L·∫•y vai tr√≤ t·ª´ JWT

            if (!maPhat) {
                return res.status(400).json({ 
                    message: 'Vui l√≤ng cung c·∫•p m√£ ph·∫°t' 
                });
            }

            console.log('üîë Payment Request:', { userId, userRole, maPhat });

            // Ki·ªÉm tra ph·∫°t c√≥ t·ªìn t·∫°i v√† ch∆∞a thanh to√°n
            const fine = await prisma.thePhat.findUnique({
                where: { MaPhat: parseInt(maPhat) },
                include: {
                    TraSach: {
                        include: {
                            PhieuMuon: {
                                include: {
                                    DocGia: {
                                        include: {
                                            TaiKhoan: true
                                        }
                                    }
                                }
                            }
                        }
                    },
                    CuonSach: {
                        include: {
                            Sach: true
                        }
                    }
                }
            });

            if (!fine) {
                return res.status(404).json({ 
                    message: 'Kh√¥ng t√¨m th·∫•y ph·∫°t' 
                });
            }

            // Ki·ªÉm tra d·ªØ li·ªáu c√≥ ƒë·∫ßy ƒë·ªß kh√¥ng
            if (!fine.TraSach || !fine.TraSach.PhieuMuon || !fine.TraSach.PhieuMuon.DocGia) {
                console.error('‚ùå Missing relationship data in fine');
                return res.status(500).json({ 
                    message: 'L·ªói d·ªØ li·ªáu: Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·ªôc gi·∫£ cho ph·∫°t n√†y'
                });
            }

            const fineOwnerId = fine.TraSach.PhieuMuon.DocGia.MaTK;
            
            // Ph√¢n quy·ªÅn:
            // - VaiTro = 2 (ƒê·ªôc gi·∫£): Ch·ªâ thanh to√°n ph·∫°t c·ªßa m√¨nh
            // - VaiTro = 0 ho·∫∑c 1 (Admin/Nh√¢n vi√™n): C√≥ th·ªÉ thanh to√°n cho b·∫•t k·ª≥ ai
            if (userRole === 2 && fineOwnerId !== userId) {
                console.log('‚ùå ƒê·ªôc gi·∫£ kh√¥ng th·ªÉ thanh to√°n ph·∫°t c·ªßa ng∆∞·ªùi kh√°c');
                return res.status(403).json({ 
                    message: 'B·∫°n ch·ªâ c√≥ th·ªÉ thanh to√°n ph·∫°t c·ªßa ch√≠nh m√¨nh' 
                });
            }
            
            console.log('‚úÖ Authorization passed:', userRole === 2 ? 'ƒê·ªôc gi·∫£ thanh to√°n ph·∫°t c·ªßa m√¨nh' : 'Admin/Nh√¢n vi√™n thanh to√°n');

            // Ki·ªÉm tra ƒë√£ thanh to√°n ch∆∞a
            if (fine.TrangThaiThanhToan === 'DaThanhToan') {
                return res.status(400).json({ 
                    message: 'Ph·∫°t n√†y ƒë√£ ƒë∆∞·ª£c thanh to√°n' 
                });
            }

            // T·∫°o m√£ giao d·ªãch unique
            const transactionCode = sePayService.generateTransactionCode(maPhat);
            const amount = parseFloat(fine.SoTienPhat);

            // T·∫°o QR code
            const qrData = await sePayService.generateQRCode(
                transactionCode, 
                amount,
                `Thanh to√°n ph·∫°t #${maPhat} - ${fine.CuonSach.Sach.TieuDe}`
            );

            // L∆∞u th√¥ng tin giao d·ªãch v√†o database (optional - c√≥ th·ªÉ t·∫°o b·∫£ng m·ªõi)
            // Ho·∫∑c c·∫≠p nh·∫≠t GhiChu c·ªßa ph·∫°t v·ªõi m√£ giao d·ªãch
            await prisma.thePhat.update({
                where: { MaPhat: parseInt(maPhat) },
                data: {
                    GhiChu: `M√£ GD: ${transactionCode}${fine.GhiChu ? ' | ' + fine.GhiChu : ''}`
                }
            });

            res.status(200).json({
                message: 'T·∫°o QR code th√†nh c√¥ng',
                data: {
                    ...qrData,
                    fine: {
                        maPhat: fine.MaPhat,
                        soTienPhat: fine.SoTienPhat,
                        lyDoPhat: fine.LyDoPhat,
                        tenSach: fine.CuonSach.Sach.TieuDe
                    }
                }
            });

        } catch (error) {
            console.error('Create Payment QR Error:', error);
            res.status(500).json({ 
                message: 'L·ªói h·ªá th·ªëng khi t·∫°o QR thanh to√°n', 
                error: error.message 
            });
        }
    }

    /**
     * [POST] /api/payments/check-transaction
     * Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n
     */
    async checkPaymentStatus(req, res) {
        try {
            const { maPhat, transactionCode } = req.body;
            const userId = req.user.id;
            const userRole = req.user.role;

            if (!maPhat || !transactionCode) {
                return res.status(400).json({ 
                    message: 'Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin' 
                });
            }

            // L·∫•y th√¥ng tin ph·∫°t
            const fine = await prisma.thePhat.findUnique({
                where: { MaPhat: parseInt(maPhat) },
                include: {
                    TraSach: {
                        include: {
                            PhieuMuon: {
                                include: {
                                    DocGia: {
                                        include: {
                                            TaiKhoan: true
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            });

            if (!fine) {
                return res.status(404).json({ 
                    message: 'Kh√¥ng t√¨m th·∫•y ph·∫°t' 
                });
            }

            // Ki·ªÉm tra d·ªØ li·ªáu c√≥ ƒë·∫ßy ƒë·ªß kh√¥ng
            if (!fine.TraSach || !fine.TraSach.PhieuMuon || !fine.TraSach.PhieuMuon.DocGia) {
                return res.status(500).json({ 
                    message: 'L·ªói d·ªØ li·ªáu: Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·ªôc gi·∫£ cho ph·∫°t n√†y'
                });
            }

            const fineOwnerId = fine.TraSach.PhieuMuon.DocGia.MaTK;
            
            // Ph√¢n quy·ªÅn: ƒê·ªôc gi·∫£ ch·ªâ ki·ªÉm tra ph·∫°t c·ªßa m√¨nh, Admin/NV ki·ªÉm tra t·∫•t c·∫£
            if (userRole === 2 && fineOwnerId !== userId) {
                return res.status(403).json({ 
                    message: 'B·∫°n ch·ªâ c√≥ th·ªÉ ki·ªÉm tra ph·∫°t c·ªßa ch√≠nh m√¨nh' 
                });
            }

            // N·∫øu ƒë√£ thanh to√°n r·ªìi
            if (fine.TrangThaiThanhToan === 'DaThanhToan') {
                return res.status(200).json({
                    success: true,
                    paid: true,
                    message: 'Ph·∫°t ƒë√£ ƒë∆∞·ª£c thanh to√°n tr∆∞·ªõc ƒë√≥'
                });
            }

            // Ki·ªÉm tra giao d·ªãch v·ªõi SePay
            const amount = parseFloat(fine.SoTienPhat);
            const checkResult = await sePayService.checkTransaction(transactionCode, amount);

            // N·∫øu ƒë√£ thanh to√°n
            if (checkResult.paid) {
                // C·∫≠p nh·∫≠t tr·∫°ng th√°i ph·∫°t
                await prisma.thePhat.update({
                    where: { MaPhat: parseInt(maPhat) },
                    data: {
                        TrangThaiThanhToan: 'DaThanhToan',
                        NgayThanhToan: new Date(),
                        GhiChu: `Thanh to√°n online qua SePay - GD: ${checkResult.transaction?.id || transactionCode}`
                    }
                });

                return res.status(200).json({
                    success: true,
                    paid: true,
                    message: 'Thanh to√°n th√†nh c√¥ng',
                    transaction: checkResult.transaction
                });
            }

            // Ch∆∞a thanh to√°n
            res.status(200).json({
                success: true,
                paid: false,
                message: checkResult.message || 'Ch∆∞a nh·∫≠n ƒë∆∞·ª£c thanh to√°n'
            });

        } catch (error) {
            console.error('Check Payment Status Error:', error);
            res.status(500).json({ 
                message: 'L·ªói h·ªá th·ªëng khi ki·ªÉm tra thanh to√°n', 
                error: error.message 
            });
        }
    }

    /**
     * [GET] /api/payments/fines/unpaid
     * L·∫•y danh s√°ch ph·∫°t ch∆∞a thanh to√°n c·ªßa ƒë·ªôc gi·∫£
     */
    async getUnpaidFines(req, res) {
        try {
            const userId = req.user.id;

            // L·∫•y IdDG t·ª´ user
            const docGia = await prisma.docGia.findUnique({
                where: { MaTK: userId }
            });

            if (!docGia) {
                return res.status(404).json({ 
                    message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·ªôc gi·∫£' 
                });
            }

            // L·∫•y danh s√°ch ph·∫°t ch∆∞a thanh to√°n
            const unpaidFines = await prisma.thePhat.findMany({
                where: {
                    TrangThaiThanhToan: 'ChuaThanhToan',
                    TraSach: {
                        PhieuMuon: {
                            IdDG: docGia.IdDG
                        }
                    }
                },
                include: {
                    CuonSach: {
                        include: {
                            Sach: true
                        }
                    },
                    TraSach: {
                        include: {
                            PhieuMuon: true
                        }
                    }
                },
                orderBy: {
                    MaPhat: 'desc'
                }
            });

            // T√≠nh t·ªïng ti·ªÅn ph·∫°t
            const totalAmount = unpaidFines.reduce((sum, fine) => {
                return sum + parseFloat(fine.SoTienPhat);
            }, 0);

            res.status(200).json({
                message: 'L·∫•y danh s√°ch ph·∫°t th√†nh c√¥ng',
                data: unpaidFines,
                summary: {
                    soLuong: unpaidFines.length,
                    tongTienPhat: totalAmount
                }
            });

        } catch (error) {
            console.error('Get Unpaid Fines Error:', error);
            res.status(500).json({ 
                message: 'L·ªói h·ªá th·ªëng', 
                error: error.message 
            });
        }
    }

    /**
     * [POST] /api/payments/pay-multiple
     * Thanh to√°n nhi·ªÅu ph·∫°t c√πng l√∫c
     */
    async createMultiplePaymentQR(req, res) {
        try {
            const { maPhatList } = req.body; // Array of maPhat
            const userId = req.user.id;
            const userRole = req.user.role;

            if (!maPhatList || !Array.isArray(maPhatList) || maPhatList.length === 0) {
                return res.status(400).json({ 
                    message: 'Vui l√≤ng cung c·∫•p danh s√°ch m√£ ph·∫°t' 
                });
            }

            // L·∫•y danh s√°ch ph·∫°t
            const fines = await prisma.thePhat.findMany({
                where: {
                    MaPhat: { in: maPhatList.map(m => parseInt(m)) },
                    TrangThaiThanhToan: 'ChuaThanhToan'
                },
                include: {
                    TraSach: {
                        include: {
                            PhieuMuon: {
                                include: {
                                    DocGia: {
                                        include: {
                                            TaiKhoan: true
                                        }
                                    }
                                }
                            }
                        }
                    },
                    CuonSach: {
                        include: {
                            Sach: true
                        }
                    }
                }
            });

            if (fines.length === 0) {
                return res.status(404).json({ 
                    message: 'Kh√¥ng t√¨m th·∫•y ph·∫°t n√†o c·∫ßn thanh to√°n' 
                });
            }

            // Ph√¢n quy·ªÅn: ƒê·ªôc gi·∫£ ch·ªâ thanh to√°n ph·∫°t c·ªßa m√¨nh, Admin/NV thanh to√°n t·∫•t c·∫£
            if (userRole === 2) {
                const invalidFine = fines.find(fine => 
                    fine.TraSach?.PhieuMuon?.DocGia?.MaTK !== userId
                );
                if (invalidFine) {
                    return res.status(403).json({ 
                        message: 'B·∫°n ch·ªâ c√≥ th·ªÉ thanh to√°n ph·∫°t c·ªßa ch√≠nh m√¨nh' 
                    });
                }
            }

            // T√≠nh t·ªïng ti·ªÅn
            const totalAmount = fines.reduce((sum, fine) => sum + parseFloat(fine.SoTienPhat), 0);

            // T·∫°o m√£ giao d·ªãch cho t·∫•t c·∫£
            const maPhatStr = maPhatList.join('-');
            const transactionCode = `MULTI${Date.now().toString(36).toUpperCase()}`;

            // T·∫°o QR code
            const qrData = await sePayService.generateQRCode(
                transactionCode,
                totalAmount,
                `Thanh to√°n ${fines.length} ph·∫°t`
            );

            // C·∫≠p nh·∫≠t ghi ch√∫ cho t·∫•t c·∫£ ph·∫°t
            await Promise.all(fines.map(fine => 
                prisma.thePhat.update({
                    where: { MaPhat: fine.MaPhat },
                    data: {
                        GhiChu: `M√£ GD: ${transactionCode}${fine.GhiChu ? ' | ' + fine.GhiChu : ''}`
                    }
                })
            ));

            res.status(200).json({
                message: 'T·∫°o QR code thanh to√°n th√†nh c√¥ng',
                data: {
                    ...qrData,
                    fines: fines.map(f => ({
                        maPhat: f.MaPhat,
                        soTienPhat: f.SoTienPhat,
                        lyDoPhat: f.LyDoPhat,
                        tenSach: f.CuonSach.Sach.TieuDe
                    })),
                    totalAmount: totalAmount,
                    maPhatList: maPhatList
                }
            });

        } catch (error) {
            console.error('Create Multiple Payment QR Error:', error);
            res.status(500).json({ 
                message: 'L·ªói h·ªá th·ªëng', 
                error: error.message 
            });
        }
    }
}

module.exports = new PaymentController();
