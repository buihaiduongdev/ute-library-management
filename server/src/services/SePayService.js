const axios = require('axios');

class SePayService {
    constructor() {
        this.apiKey = process.env.SEPAY_API_KEY || '0UKHLV7CD1XWKKME3PQTYQ1BZZLKFBFW4VB8YJGSV84SCV6OQGANFAZXHYNAQGNW';
        this.accountNumber = process.env.SEPAY_ACCOUNT_NUMBER || '6460603752';
        this.bankCode = 'BIDV'; // Ng√¢n h√†ng BIDV
        this.baseURL = 'https://my.sepay.vn/userapi';
    }

    /**
     * T·∫°o n·ªôi dung chuy·ªÉn kho·∫£n v·ªõi m√£ giao d·ªãch
     * @param {string} transactionCode - M√£ giao d·ªãch unique
     * @param {number} amount - S·ªë ti·ªÅn
     * @returns {string} - N·ªôi dung chuy·ªÉn kho·∫£n
     */
    generateTransferContent(transactionCode, amount) {
        return `UTE ${transactionCode}`;
    }

    /**
     * T·∫°o QR code thanh to√°n
     * @param {string} transactionCode - M√£ giao d·ªãch
     * @param {number} amount - S·ªë ti·ªÅn thanh to√°n
     * @param {string} description - M√¥ t·∫£ giao d·ªãch
     * @returns {Object} - URL QR code v√† th√¥ng tin thanh to√°n
     */
    async generateQRCode(transactionCode, amount, description = '') {
        try {
            const content = this.generateTransferContent(transactionCode, amount);
            
            // S·ª≠ d·ª•ng VietQR API ƒë·ªÉ t·∫°o QR code
            // Format: https://api.vietqr.io/v2/generate
            const qrData = {
                accountNo: this.accountNumber,
                accountName: 'UTE LIBRARY',
                acqId: '970418', // BIDV bank code
                amount: amount,
                addInfo: content,
                format: 'text',
                template: 'compact'
            };

            const vietQRUrl = `https://img.vietqr.io/image/${qrData.acqId}-${qrData.accountNo}-${qrData.template}.png?amount=${qrData.amount}&addInfo=${encodeURIComponent(qrData.addInfo)}&accountName=${encodeURIComponent(qrData.accountName)}`;

            return {
                success: true,
                qrCodeUrl: vietQRUrl,
                accountNumber: this.accountNumber,
                accountName: 'UTE LIBRARY',
                bankCode: this.bankCode,
                amount: amount,
                content: content,
                transactionCode: transactionCode
            };
        } catch (error) {
            console.error('Generate QR Code Error:', error);
            throw new Error('Kh√¥ng th·ªÉ t·∫°o m√£ QR thanh to√°n');
        }
    }

    /**
     * Ki·ªÉm tra giao d·ªãch ƒë√£ thanh to√°n ch∆∞a
     * @param {string} transactionCode - M√£ giao d·ªãch c·∫ßn ki·ªÉm tra
     * @param {number} amount - S·ªë ti·ªÅn c·∫ßn thanh to√°n
     * @returns {Object} - Th√¥ng tin giao d·ªãch
     */
    async checkTransaction(transactionCode, amount) {
        try {
            // T√≠nh ng√†y t·ª´ 7 ng√†y tr∆∞·ªõc ƒë·∫øn hi·ªán t·∫°i
            const dateTo = new Date();
            const dateFrom = new Date();
            dateFrom.setDate(dateFrom.getDate() - 7);

            // Format: DD/MM/YYYY
            const formatDate = (date) => {
                const day = String(date.getDate()).padStart(2, '0');
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const year = date.getFullYear();
                return `${day}/${month}/${year}`;
            };

            console.log('üîç Checking transaction with SePay...');
            console.log('   Transaction Code:', transactionCode);
            console.log('   Amount:', amount);
            console.log('   Account Number:', this.accountNumber);

            const response = await axios.get(`${this.baseURL}/transactions/list`, {
                params: {
                    account_number: this.accountNumber,
                    limit: 100, // L·∫•y 100 giao d·ªãch g·∫ßn nh·∫•t
                    date_from: formatDate(dateFrom),
                    date_to: formatDate(dateTo)
                },
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`,
                    'Content-Type': 'application/json'
                }
            });

            console.log('üìä SePay Response:', {
                status: response.data?.status,
                message: response.data?.messages,
                transactionCount: response.data?.transactions?.length || 0
            });

            if (response.data && response.data.status === 200) {
                const transactions = response.data.transactions || [];
                const content = this.generateTransferContent(transactionCode, amount);
                
                console.log('üîç Searching for transaction with content:', content);
                console.log('üìù Recent transactions:');
                transactions.slice(0, 5).forEach(trans => {
                    console.log(`   - ${trans.transaction_content} | Amount: ${trans.amount_in} | Date: ${trans.transaction_date}`);
                });

                // T√¨m giao d·ªãch kh·ªõp v·ªõi m√£ v√† s·ªë ti·ªÅn
                const matchedTransaction = transactions.find(trans => {
                    const transContent = (trans.transaction_content || '').toUpperCase().trim();
                    const searchContent = content.toUpperCase().trim(); // "UTE PHAT1ABC123"
                    const searchCode = transactionCode.toUpperCase().trim(); // "PHAT1ABC123"
                    
                    // Ki·ªÉm tra s·ªë ti·ªÅn kh·ªõp (ch·∫•p nh·∫≠n sai s·ªë 1 ƒë·ªìng)
                    const amountMatch = Math.abs(parseFloat(trans.amount_in) - amount) < 1;
                    
                    // Ki·ªÉm tra n·ªôi dung chuy·ªÉn kho·∫£n - linh ho·∫°t h∆°n
                    // Option 1: Kh·ªõp ch√≠nh x√°c "UTE PHAT1ABC123"
                    // Option 2: Ch·ª©a "PHAT1ABC123" v√† c√≥ "UTE" ·ªü ƒë√¢u ƒë√≥
                    // Option 3: Ch·ª©a "UTE" v√† "PHAT1ABC123" (kh√¥ng c·∫ßn li·ªÅn k·ªÅ)
                    const exactMatch = transContent.includes(searchContent);
                    const flexibleMatch = transContent.includes(searchCode) && transContent.includes('UTE');
                    const contentMatch = exactMatch || flexibleMatch;
                    
                    // Debug logging cho m·ªói giao d·ªãch ƒë∆∞·ª£c ki·ªÉm tra
                    if (amountMatch) {
                        console.log(`   üîç Checking: "${trans.transaction_content}"`);
                        console.log(`      Amount match: ‚úÖ (${trans.amount_in} ‚âà ${amount})`);
                        console.log(`      Exact match: ${exactMatch ? '‚úÖ' : '‚ùå'} (looking for "${searchContent}")`);
                        console.log(`      Flexible match: ${flexibleMatch ? '‚úÖ' : '‚ùå'} (has "UTE" + "${searchCode}")`);
                        console.log(`      Final: ${contentMatch ? '‚úÖ MATCHED' : '‚ùå Not matched'}`);
                    }
                    
                    if (contentMatch && amountMatch) {
                        console.log('‚úÖ‚úÖ‚úÖ Found matching transaction:', trans.transaction_content);
                    }
                    
                    return amountMatch && contentMatch;
                });

                if (matchedTransaction) {
                    console.log('‚úÖ Payment confirmed!');
                    return {
                        success: true,
                        paid: true,
                        transaction: {
                            id: matchedTransaction.id,
                            amount: matchedTransaction.amount_in,
                            content: matchedTransaction.transaction_content,
                            date: matchedTransaction.transaction_date,
                            bankAccount: matchedTransaction.bank_brand_name
                        }
                    };
                }

                console.log('‚ùå No matching transaction found');
                return {
                    success: true,
                    paid: false,
                    message: 'Ch∆∞a t√¨m th·∫•y giao d·ªãch thanh to√°n. Vui l√≤ng ƒë·∫£m b·∫£o b·∫°n ƒë√£ chuy·ªÉn ƒë√∫ng n·ªôi dung v√† s·ªë ti·ªÅn.'
                };
            }

            console.log('‚ùå Invalid response from SePay:', response.data);
            return {
                success: false,
                paid: false,
                message: response.data?.messages || 'Kh√¥ng th·ªÉ ki·ªÉm tra giao d·ªãch'
            };

        } catch (error) {
            console.error('‚ùå Check Transaction Error:', {
                message: error.message,
                response: error.response?.data,
                status: error.response?.status
            });
            
            // N·∫øu l·ªói API key ho·∫∑c connection, v·∫´n tr·∫£ v·ªÅ response ƒë·ªÉ kh√¥ng break flow
            return {
                success: false,
                paid: false,
                message: 'L·ªói k·∫øt n·ªëi v·ªõi h·ªá th·ªëng thanh to√°n. Vui l√≤ng ki·ªÉm tra API key ho·∫∑c th·ª≠ l·∫°i sau.',
                error: error.response?.data?.messages || error.message
            };
        }
    }

    /**
     * L·∫•y l·ªãch s·ª≠ giao d·ªãch
     * @param {number} limit - S·ªë l∆∞·ª£ng giao d·ªãch c·∫ßn l·∫•y
     * @returns {Array} - Danh s√°ch giao d·ªãch
     */
    async getTransactionHistory(limit = 20) {
        try {
            // L·∫•y giao d·ªãch trong 30 ng√†y g·∫ßn nh·∫•t
            const dateTo = new Date();
            const dateFrom = new Date();
            dateFrom.setDate(dateFrom.getDate() - 30);

            const formatDate = (date) => {
                const day = String(date.getDate()).padStart(2, '0');
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const year = date.getFullYear();
                return `${day}/${month}/${year}`;
            };

            const response = await axios.get(`${this.baseURL}/transactions/list`, {
                params: {
                    account_number: this.accountNumber,
                    limit: limit,
                    date_from: formatDate(dateFrom),
                    date_to: formatDate(dateTo)
                },
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`,
                    'Content-Type': 'application/json'
                }
            });

            if (response.data && response.data.status === 200) {
                return {
                    success: true,
                    transactions: response.data.transactions || []
                };
            }

            return {
                success: false,
                transactions: [],
                message: response.data?.messages || 'Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ giao d·ªãch'
            };

        } catch (error) {
            console.error('Get Transaction History Error:', error.response?.data || error.message);
            throw new Error('Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ giao d·ªãch');
        }
    }

    /**
     * T·∫°o m√£ giao d·ªãch unique
     * @param {number} maPhat - M√£ ph·∫°t
     * @returns {string} - M√£ giao d·ªãch
     */
    generateTransactionCode(maPhat) {
        const timestamp = Date.now().toString(36).toUpperCase();
        return `PHAT${maPhat}${timestamp}`;
    }
}

module.exports = new SePayService();
